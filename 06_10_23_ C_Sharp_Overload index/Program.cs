/*
 * Сайт Метанит !!! по С++ сайт рависли. Дум 3 много исходного кода С++
 * 
 ТЕМА: ИНДЕКСАТОРЫ
Цель: Совершенствование навыков применения объектно-ориентированного подхода в программировании с использованием средств C#, создания пользовательских типов, использования средств обработки исключительных ситуаций. 
Необходимые инструменты: MS Visual Studio 2016.
Документация: Конспект, Литература.
Ориентировочное время исполнения: 1 час.
Задание 1.
В С # индексация начинается с нуля, но в некоторых 
языках программирования это не так. Например, в Turbo 
Pascal индексация массиве начинается с 1. Напишите класс 
RangeOfArray, который позволяет работать с массивом 
такого типа, в котором индексный диапазон устанавливается пользователем. Например, в диапазоне от 6 до 10, 
или от –9 до 15.
Подсказка: В классе можно объявить две переменных, 
которые будут содержать верхний и нижний индекс допустимого диапазона. 


Пользоватеолем вводится диапазон индекса массива от –9 до 15
Тоесть первый элемент начинается с первого индекса введенного пользователем.
и последний элемент заканчивается со второго введенного пользователем индекса.
После вывода результата пользователь может добавить элемент в массив.
Напишите класс 
RangeOfArray, который позволяет работать с этим массивом. 
Продемонстрировать в main()
Написать решение в C# и объяснить по ход действий


///////////////////////////////////////
В данном решении используется предыдущий класс RangeOfArray.
В методе FillRandom создается массив и заполняется случайными значениями при помощи класса Random.

Затем, в Main создается объект класса RangeOfArray с указанными пользователем нижним и верхним индексами диапазона.
Метод FillRandom вызывается для заполнения массива случайными значениями.
Затем, метод PrintArray вызывается для вывода элементов массива с их значениями. 
//////////////////////////////


ТЕМА: НАСЛЕДОВАНИЕ
Цель: Закрепить у слушателей практические навыки и теоретические знания для работы классами и объектами, свойствами. 
Научиться создавать иерархии классов. 
Необходимые инструменты: MS Visual Studio 2016.
Документация: Конспект, Литература.
Ориентировочное время исполнения: 2 часа.
Требования к отчету: Отчет должен быть оформлен в виде 
электронного документа: программный код с комментариями, 
выводы о результатах выполняемых действий и копии экрана. 
Размер файла отчета до 2 МБ со скриншотами.
Задание 1. Разработать приложение «Резервная копия»
Цель: произвести расчет необходимого количества внешних носителей информации при переносе за один раз 
важной информации (565 Гб,файлыпо 780 Мб) с рабочего 
компьютера на домашний компьютер и затрачиваемое 
на данный процесс время. Вы имеете в распоряжении 
следующие типы носителей информации: 
■ Flash-память, 
■ DVD-диск, 
■ съемный HDD. 
Каждый носитель информации является объектом соответствующего класса:

ТЕМА: НАСЛЕДОВАНИЕ
Цель: Закрепить у слушателей практические навыки и теоретические знания для работы классами и объектами, свойствами. 
Научиться создавать иерархии классов. 
Необходимые инструменты: MS Visual Studio 2016.
Документация: Конспект, Литература.
Ориентировочное время исполнения: 2 часа.
Требования к отчету: Отчет должен быть оформлен в виде 
электронного документа: программный код с комментариями, 
выводы о результатах выполняемых действий и копии экрана. 
Размер файла отчета до 2 МБ со скриншотами.
Задание 1. Разработать приложение «Резервная копия»
Цель: произвести расчет необходимого количества внешних носителей информации при переносе за один раз 
важной информации (565 Гб,файлыпо 780 Мб) с рабочего 
компьютера на домашний компьютер и затрачиваемое 
на данный процесс время. Вы имеете в распоряжении 
следующие типы носителей информации: 
■ Flash-память, 
■ DVD-диск, 
■ съемный HDD. 
Каждый носитель информации является объектом соответствующего класса:


Приложение должно предоставлять следующие возможности:
■ расчет общего количества памяти всех устройств;
■ копирование информации на устройства;
■ расчет времени необходимого для копирования;
■ расчет необходимого количества носителей информации представленных типов для переноса 
информации.
 */


namespace _06_10_23__C_Sharp_Overload_index
{ 

    class RangeOfArray
    {
        private int lowerIndex;
        private int upperIndex;
        private int[] arr;

        public RangeOfArray(int lowerIndex, int upperIndex)
        {
            if (lowerIndex > upperIndex)
            {
                throw new ArgumentException("Нижний индекс должен быть меньше или равен верхнему индексу");
            }

            this.lowerIndex = lowerIndex;
            this.upperIndex = upperIndex;
            int length = upperIndex - lowerIndex + 1;
            arr = new int[length];
        }

        public void FillRandom()
        {
            Random random = new Random();
            for (int i = 0; i < arr.Length; i++)
            {
                arr[i] = random.Next();
            }
        }

        public void PrintArray()
        {
            Console.WriteLine("Массив:");
            for (int i = lowerIndex; i <= upperIndex; i++)
            {
                Console.WriteLine($"Элемент с индексом {i}: {arr[i - lowerIndex]}");
            }
        }

        /*
         Функция добавляет значение value в конец массива arr. 
        Для этого она увеличивает размер массива на одну позицию с помощью метода Array.Resize,
        а затем записывает значение в новую ячейку.
        После этого функция увеличивает переменную upperIndex, которая, вероятно,
        хранит индекс последнего элемента массива.

        Когда вы передаете аргумент в метод с ключевым словом ref, вы можете изменить значение этого аргумента внутри метода.
        Это позволяет вам изменять параметры метода непосредственно, а не возвращать новые значения.

        Метод ToLower() переводит все буквы в нижний регистр. Например, 
        если мы передадим в этот метод строку “Hello, world!”, то на выходе получим “hello, world!”.

         */
        public void AddElement(int value) {
                Array.Resize(ref arr, arr.Length + 1);
                arr[arr.Length - 1] = value;
                upperIndex++;
        }
        

        public int this[int index]
        {
            get
            {
                if (index < lowerIndex || index > upperIndex)
                {
                    throw new IndexOutOfRangeException($"Индекс {index} находится вне диапазона массива");
                }

                return arr[index - lowerIndex];
            }
            set
            {
                if (index < lowerIndex || index > upperIndex)
                {
                    throw new IndexOutOfRangeException($"Индекс {index} находится вне диапазона массива");
                }

                arr[index - lowerIndex] = value;
            }
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Введите нижний индекс диапазона:");
            int lowerIndex = int.Parse(Console.ReadLine());

            Console.WriteLine("Введите верхний индекс диапазона:");
            int upperIndex = int.Parse(Console.ReadLine());

            RangeOfArray rangeArray = new RangeOfArray(lowerIndex, upperIndex);

            rangeArray.FillRandom();
            rangeArray.PrintArray();

            Console.WriteLine("Хотите добавить элемент в массив? (Y/N)");
            string answer = Console.ReadLine();

            while (answer.ToLower() == "y")
            {
                Console.WriteLine("Введите значение элемента:");
                int value = int.Parse(Console.ReadLine());

                rangeArray.AddElement(value);
                rangeArray.PrintArray();

                Console.WriteLine("Хотите добавить еще элемент в массив? (Y/N)");
                answer = Console.ReadLine();
            }
        }  
    }
}